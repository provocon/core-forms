<?xml version="1.0" encoding="UTF-8"?>
<local:AdvancedVisibilitySettingsTabBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                                         xmlns:exml="http://www.jangaroo.net/exml/0.8"
                                         xmlns="exml:ext.config"
                                         xmlns:local="com.tallence.formeditor.studio.fields.advancedsettings.tabs.*"
                                         xmlns:ui="exml:com.coremedia.ui.config"
                                         xmlns:editor="exml:com.coremedia.cms.editor.sdk.config"
                                         title="{resourceManager.getString('com.tallence.formeditor.studio.bundles.FormEditor', 'FormEditor_advancedSettings_tabs_visibility_title')}"
                                         description="{resourceManager.getString('com.tallence.formeditor.studio.bundles.FormEditor', 'FormEditor_advancedSettings_tabs_visibility_description')}">
  <fx:Script><![CDATA[
    import com.tallence.formeditor.studio.elements.CheckBoxesEditor;
    import com.tallence.formeditor.studio.elements.RadioButtonsEditor;
    import com.tallence.formeditor.studio.elements.SelectBoxEditor;

    public static const xtype:String = "com.tallence.formeditor.studio.editor.fields.advancedsettings.tabs.advancedVisibilitySettingsTab";

    private var config:AdvancedVisibilitySettingsTab;

    public native function AdvancedVisibilitySettingsTab(config:AdvancedVisibilitySettingsTab = null);
    ]]>
    </fx:Script>
  <local:items>
    <FieldContainer
            fieldLabel="{resourceManager.getString('com.tallence.formeditor.studio.bundles.FormEditor', 'FormEditor_advancedSettings_tabs_visibility_active_fieldLabel')}">
      <items>
        <ui:StatefulCheckbox>
          <ui:plugins>
            <ui:BindPropertyPlugin bidirectional="true"
                                   skipIfUndefined="true"
                                   bindTo="{getActivatedVE(config)}"/>
            <editor:BindDisablePlugin bindTo="{config.bindTo}"
                                      forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"/>
          </ui:plugins>
        </ui:StatefulCheckbox>
      </items>
    </FieldContainer>
    <FieldContainer
            fieldLabel="{resourceManager.getString('com.tallence.formeditor.studio.bundles.FormEditor', 'FormEditor_advancedSettings_tabs_visibility_element_fieldLabel')}">
      <items>
        <local:VisibilityComboBoxField itemId="{ELEMENTS_COMBO_ITEM_ID}"
                                       bindTo="{config.bindTo}"
                                       forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"
                                       elementsVE="{getAvailableElementsVE(config)}"
                                       selectedVE="{getSelectedIdVE(config)}"/>
      </items>
      <plugins>
        <ui:BindVisibilityPlugin bindTo="{getActivatedVE(config)}"/>
      </plugins>
    </FieldContainer>
    <FieldContainer
            fieldLabel="{resourceManager.getString('com.tallence.formeditor.studio.bundles.FormEditor', 'FormEditor_advancedSettings_tabs_visibility_value_fieldLabel')}">
      <items>
        <ui:SwitchingContainer activeItemValueExpression="{getSelectedIdVE(config)}"
                               transformer="{selectedFormElementTypeTransformer}">
          <ui:items>
            <!-- If a special editor is required, an editor can be defined based on the type of the form element. For
            checkboxes and radio boxes, the defined options are displayed in a drop down box and can be selected by the
            user-->
            <local:VisibilityComboBoxField itemId="{RadioButtonsEditor.FIELD_TYPE}"
                                           bindTo="{config.bindTo}"
                                           forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"
                                           elementsVE="{getAvailableOptionsVE(config)}"
                                           selectedVE="{getVisibilityValueVE(config)}"/>
            <local:VisibilityComboBoxField itemId="{CheckBoxesEditor.FIELD_TYPE}"
                                           bindTo="{config.bindTo}"
                                           forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"
                                           elementsVE="{getAvailableOptionsVE(config)}"
                                           selectedVE="{getVisibilityValueVE(config)}"/>
            <local:VisibilityComboBoxField itemId="{SelectBoxEditor.FIELD_TYPE}"
                                           bindTo="{config.bindTo}"
                                           forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"
                                           elementsVE="{getAvailableOptionsVE(config)}"
                                           selectedVE="{getVisibilityValueVE(config)}"/>
          </ui:items>
          <ui:itemTemplate>
            <!-- By default the value can be set using a string property field. -->
            <ui:StatefulTextField width="100%">
              <ui:plugins exml:mode="append">
                <ui:BindPropertyPlugin bidirectional="true"
                                       skipIfUndefined="true"
                                       bindTo="{getVisibilityValueVE(config)}"/>
                <editor:BindDisablePlugin bindTo="{config.bindTo}"
                                          forceReadOnlyValueExpression="{config.forceReadOnlyValueExpression}"/>
              </ui:plugins>
            </ui:StatefulTextField>
          </ui:itemTemplate>
          <ui:plugins exml:mode="append">
            <ui:BindVisibilityPlugin bindTo="{getActivatedVE(config)}"/>
          </ui:plugins>
        </ui:SwitchingContainer>
      </items>
      <plugins>
        <ui:BindVisibilityPlugin bindTo="{getActivatedVE(config)}"/>
      </plugins>
    </FieldContainer>
  </local:items>
</local:AdvancedVisibilitySettingsTabBase>
